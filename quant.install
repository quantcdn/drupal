<?php

/**
 * @file
 * Install hook definitions for Quant.
 */

use Drupal\Core\Database\Database;
use Drupal\views\Entity\View;
use Symfony\Component\Yaml\Yaml;

/**
 * Perform setup tasks for Quant.
 */
function quant_install() {
  $config = \Drupal::configFactory()->getEditable('quant.token_settings');
  $config->set('secret', bin2hex(random_bytes(32)));
  $config->save();
}

/**
 * Changes to the token schema definition to support path protection.
 */
function quant_update_9001(&$sandbox) {
  // Remove any stale tokens.
  if (method_exists(\Drupal::service('quant.token_manager'), 'release')) {
    \Drupal::service('quant.token_manager')->release();
  }

  $schema = Database::getConnection()->schema();

  $spec = [
    'type' => 'text',
    'size' => 'normal',
    'not null' => FALSE,
    'description' => 'A path to register for the token',
  ];

  $schema->changeField('quant_token', 'nid', 'route', $spec);

  $spec = [
    'type' => 'text',
    'size' => 'normal',
    'not null' => TRUE,
    'description' => 'Created timestamp for the token',
  ];

  $schema->changeField('quant_token', 'created', 'created', $spec);

  $config = \Drupal::configFactory()->getEditable('quant.token_settings');
  $config->set('timeout', '+1 minute');
  $config->save();
}

/**
 * Add configuration option to disable token validation.
 */
function quant_update_9002(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('quant.token_settings');
  $config->set('disable', FALSE);
  $config->save();
}

/**
 * Support JWT for internal request tokens.
 */
function quant_update_9003(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('quant.token_settings');
  $config->set('secret', bin2hex(random_bytes(32)));
  $config->set('strict', FALSE);
  $config->save();

  // Remove the token table.
  $schema = Database::getConnection()->schema();
  $schema->dropTable('quant_token');
}

/**
 * Add default configuration for automated link following.
 */
function quant_update_9004(&$sandbox) {
  $xpaths = [
    '//li[contains(@class,"pager__item--next")]/a[contains(@href,"page=")]',
    '//li[contains(@class,"pager__item--first")]/a[starts-with(@href, "/")]',
  ];

  $config = \Drupal::configFactory()->getEditable('quant.settings');
  $config->set('xpath_selectors', implode(PHP_EOL, $xpaths));
  $config->save();
}

/**
 * Disables draft content handling if Workbench Moderation is installed.
 */
function quant_update_9005(&$sandbox) {
  if (\Drupal::moduleHandler()->moduleExists('workbench_moderation')) {
    $config = \Drupal::configFactory()->getEditable('quant.settings');
    $config->set('disable_content_drafts', 1);
    $config->save();
  }
}

/**
 * Add xpath selector to support new pager markup.
 */
function quant_update_9006(&$sandbox) {
  $new_xpath = [
    '//li[contains(@class,"page-item")]/a[contains(@href,"page=")]',
  ];

  // Add new xpath to existing xpaths.
  $config = \Drupal::configFactory()->getEditable('quant.settings');
  $xpaths = explode(PHP_EOL, $config->get('xpath_selectors'));
  $xpaths = array_merge($xpaths, $new_xpath);
  $config->set('xpath_selectors', implode(PHP_EOL, $xpaths));
  $config->save();
}

/**
 * Enables Quant setting to show page info block.
 */
function quant_update_9007(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('quant.settings');
  $config->set('quant_show_page_info_block', 1);
  $config->save();
}

/**
 * Adds Quant metadata views.
 */
function quant_update_9008() {

  // Enable views if not already.
  if (!\Drupal::moduleHandler()->moduleExists('views')) {
    \Drupal::moduleHandler()->install('views');
  }

  // Keep track of what gets saved.
  $saved = [];
  $installPath = \Drupal::service('extension.list.module')->getPath('quant') . '/config/install/';
  $names = [
    'quant_metadata_file',
    'quant_metadata_node',
    'quant_metadata_redirect',
    'quant_metadata_taxonomy'
  ];
  foreach ($names as $name) {
    // Only create if the view doesn't exist.
    if (!View::load($name)) {
      $view = 'views.view.' . $name;
      $configPath = $installPath . '/' . $view . '.yml';
      $data = Yaml::parse(file_get_contents($configPath));
      \Drupal::configFactory()->getEditable($view)->setData($data)->save(TRUE);
      $saved[] = $name;
    }
  }

  if (empty($saved)) {
    return 'No views saved.';
  }
  return 'Saved views: ' . implode(', ', $saved);
}
