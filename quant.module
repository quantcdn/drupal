<?php

/**
 * @file
 * Hook implementations for Quant.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\quant\Exception\TokenValidationDisabledException;
use Drupal\quant\Plugin\QueueItem\RouteItem;
use Drupal\quant\Seed;
use Drupal\quant\QuantQueueFactory;

/**
 * Implements hook_menu_local_tasks_alter().
 */
function quant_menu_local_tasks_alter(&$data, $route_name) {
  if (!\Drupal::requestStack()->getCurrentRequest()->headers->get('quant-token')) {
    return;
  }

  if (\Drupal::currentUser()->isAnonymous()) {
    unset($data['tabs']);
  }
}

/**
 * Implements hook_node_insert().
 */
function quant_node_insert(EntityInterface $entity) {
  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');
  $quant_node_enabled = \Drupal::config('quant.settings')->get('quant_enabled_nodes');

  if (!$quant_enabled || !$quant_node_enabled) {
    return;
  }

  $disable_drafts = \Drupal::config('quant.settings')->get('disable_content_drafts');
  if ($disable_drafts && !$entity->isPublished()) {
    return;
  }

  $context = [
    'callback' => '_quant_entity_update_op',
    'args' => $entity,
  ];

  drupal_register_shutdown_function('quant_shutdown', $context);
}

/**
 * Implements hook_node_update().
 */
function quant_node_update(EntityInterface $entity) {
  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');
  $quant_node_enabled = \Drupal::config('quant.settings')->get('quant_enabled_nodes');

  if (!$quant_enabled || !$quant_node_enabled) {
    return;
  }

  $disable_drafts = \Drupal::config('quant.settings')->get('disable_content_drafts');

  // If entity default revision is unpublished then unpublish in Quant.
  if (!$entity->isPublished() && $entity->isDefaultRevision()) {
    // Trigger an unpublish event.
    Seed::unpublishNode($entity);
  }

  // Exclude draft revisions from Quant if enabled.
  if ($disable_drafts && !$entity->isPublished()) {
    return;
  }

  $context = [
    'callback' => '_quant_entity_update_op',
    'args' => $entity,
  ];

  drupal_register_shutdown_function('quant_shutdown', $context);
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function quant_taxonomy_term_insert(EntityInterface $entity) {
  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');
  $quant_taxonomy_enabled = \Drupal::config('quant.settings')->get('quant_enabled_taxonomy');

  if (!$quant_enabled || !$quant_taxonomy_enabled) {
    return;
  }

  $context = [
    'callback' => '_quant_entity_update_op',
    'args' => $entity,
  ];

  drupal_register_shutdown_function('quant_shutdown', $context);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function quant_taxonomy_term_update(EntityInterface $entity) {
  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');
  $quant_taxonomy_enabled = \Drupal::config('quant.settings')->get('quant_enabled_taxonomy');

  if (!$quant_enabled || !$quant_taxonomy_enabled) {
    return;
  }

  // If entity default revision is unpublished then unpublish in Quant.
  if (!$entity->isPublished() && $entity->isDefaultRevision()) {
    // Trigger an unpublish event.
    Seed::unpublishTaxonomyTerm($entity);
  }

  $context = [
    'callback' => '_quant_entity_update_op',
    'args' => $entity,
  ];

  drupal_register_shutdown_function('quant_shutdown', $context);
}

/**
 * Implements hook_entity_predelete().
 */
function quant_entity_predelete(EntityInterface $entity) {

  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');

  if (!$quant_enabled) {
    return;
  }

  // This needs to not be a shutdown hook and also needs to be on
  // the predelete hook as the path alias is removed in the entity
  // delete clean-up.
  _quant_entity_delete_op($entity);
}

/**
 * Intermediary shutdown function.
 *
 * This is used to register another shutdown function. Some modules perform
 * actions during the shutdown to ensure that we have the correct hydration
 * state we use this to register the seed after all other functions.
 */
function quant_shutdown(array $context = []) {

  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');

  if (!$quant_enabled) {
    return;
  }

  if (is_callable($context['callback'])) {
    drupal_register_shutdown_function($context['callback'], $context['args']);
  }
}

/**
 * Implements hook_node_access().
 */
function quant_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $request = \Drupal::request();

  if (!$request->headers->has('quant-revision') && !$request->headers->has('quant-token')) {
    return AccessResult::neutral();
  }

  $options = ['absolute' => FALSE];
  $url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], $options)->toString();

  try {
    // Token validation for node access cannot be strict as this will be called
    // for embedded entities on a page the token process is bound to requests
    // if the incoming request has a valid token we assume that all
    // embedded entities are valid.
    //
    // @see Drupal\quant\EventSubscriber\TokenAccessSubscriber
    \Drupal::service('quant.token_manager')->validate($url, FALSE);
  }
  catch (TokenValidationDisabledException $e) {
    // Allow access when token validation is disabled.
  }
  catch (\Exception $e) {
    return AccessResult::neutral();
  }

  // If the token validation didn't trigger an exception - then the
  // token is valid and can be continued.
  return AccessResult::allowed();
}

/**
 * Implements hook_redirect_presave().
 */
function quant_redirect_presave($redirect) {
  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');
  $quant_redirect_enabled = \Drupal::config('quant.settings')->get('quant_enabled_redirects');

  if (!$quant_enabled || !$quant_redirect_enabled) {
    return;
  }

  Seed::seedRedirect($redirect);
}

/**
 * Implements hook_redirect_delete().
 */
function quant_redirect_delete($redirect) {
  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');
  $quant_redirect_enabled = \Drupal::config('quant.settings')->get('quant_enabled_redirects');

  if (!$quant_enabled || !$quant_redirect_enabled) {
    return;
  }

  Seed::deleteRedirect($redirect);
}

/**
 * Entity update operation hook.
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 *
 *   This should be registered as a shutdown function so that it
 *   can operate after the db_transaction has finished.
 *
 * @todo Entity support.
 */
function _quant_entity_update_op(EntityInterface $entity) {

  $langcode = $entity->language()->getId();

  switch ($entity->getEntityTypeId()) {
    case 'node':
      Seed::seedNode($entity, $langcode);
      break;

    case 'taxonomy_term':
      Seed::seedTaxonomyTerm($entity, $langcode);
      break;
  }

}

/**
 * Entity delete operation hook.
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 *
 *   Used to trigger an unpublish from the Quant API.
 *
 * @todo Entity support.
 */
function _quant_entity_delete_op(EntityInterface $entity) {

  switch ($entity->getEntityTypeId()) {
    case 'node':
      Seed::unpublishNode($entity);
      break;

    case 'taxonomy_term':
      Seed::unpublishTaxonomyTerm($entity);
      break;
  }

}

/**
 * Implements hook_ENTITY_TYPE_translation_delete().
 */
function quant_node_translation_delete($entity) {
  $quant_enabled = \Drupal::config('quant.settings')->get('quant_enabled');
  $quant_node_enabled = \Drupal::config('quant.settings')->get('quant_enabled_nodes');

  if (!$quant_enabled || !$quant_node_enabled) {
    return;
  }

  Seed::unpublishNode($entity);
}

/**
 * Process the queue.
 *
 * @param array $context
 *   The batch context.
 */
function quant_process_queue(array &$context) {
  $factory = QuantQueueFactory::getInstance();
  $manager = \Drupal::service('plugin.manager.queue_worker');

  $queue = $factory->get('quant_seed_worker');
  $worker = $manager->createInstance('quant_seed_worker');
  $item = $queue->claimItem();

  if (empty($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['total'] = $queue->numberOfItems();
  }

  if (!$item) {
    $context['finished'] = 1;
    return FALSE;
  }

  $worker->processItem($item->data);
  $queue->deleteItem($item);

  $context['sandbox']['progress']++;
  $context['message'] = t('Processed @i of @t', [
    '@i' => $context['sandbox']['progress'],
    '@t' => $context['sandbox']['total'],
  ]);
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['total'] >= 1 ? 0.9 : $context['sandbox']['progress'] / $context['sandbox']['total'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function quant_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = 'quant_special_pages';
}

/**
 * Update the special pages when the form is saved.
 */
function quant_special_pages() {
  $system = \Drupal::config('system.site');
  $system_pages = [
    $system->get('page.front'),
    $system->get('page.404'),
    $system->get('page.403'),
    '/',
    '/_quant404',
    '/_quant403',
  ];

  foreach ($system_pages as $route) {
    $item = new RouteItem(['route' => $route]);
    $item->send();
  }
}
