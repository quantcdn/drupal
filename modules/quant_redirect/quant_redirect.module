<?php

/**
 * @file
 * Hook implementations for Quant redirects.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function quant_redirect_form_quant_config_alter(&$form, $form_state) {
  $form['tracking_fieldset']['quant_enabled_redirects'] = array(
    '#type' => 'checkbox',
    '#title' => t('Redirects'),
    '#default_value' => variable_get('quant_enabled_redirects', FALSE),
  );
}

/**
 * Implements hook_redirect_presave().
 */
function quant_redirect_redirect_presave($redirect) {
  if (!quant_is_enabled('redirects')) {
    return;
  }

  $status_code = empty($redirect->status_code) ? variable_get('redirect_default_status_code', 301) : $redirect->status_code;
  quant_redirect_request($redirect->source, $redirect->redirect, $status_code, $redirect->status, $redirect->is_new);
}

/**
 * Implements hook_redirect_delete().
 */
function quant_redirect_redirect_delete($redirect) {
  if (!quant_is_enabled('redirects')) {
    return;
  }

  $status_code = empty($redirect->status_code) ? variable_get('redirect_default_status_code', 301) : $redirect->status_code;
  quant_redirect_request($redirect->source, $redirect->redirect, $status_code, FALSE);
}

/**
 * Trigger an API request to Quant for a redirect.
 */
function quant_redirect_request($from, $to, $status = 301, $published = TRUE, $is_new = FALSE) {
  $api = variable_get('quant_api_endpoint', QUANT_API_ENDPOINT_DEFAULT);

  if (empty($api)) {
    quant_log('API endpoint is not configured.');
    return;
  }

  $api .= '/redirect';

  $data = json_encode(array(
    'url' => '/' . ltrim($from, '/'),
    'redirect_url' => $to,
    'redirect_http_code' => (int) $status,
    'published' => (bool) $published,
  ));

  $request = array(
    'headers' => quant_api_get_request_headers() + array(
      'content-type' => 'application/json',
      'User-Agent' => 'Quant (+http://quant.io)',
    ),
    'method' => 'POST',
    'data' => $data,
  );

  // If the redirect is not new then we need to unpublish the URL
  // in Quant to ensure that the redirect is no longer visible.
  if (!(bool) $published && !(bool) $is_new) {
    $api = str_replace('redirect', 'unpublish', $api);
    $request = array(
      'headers' => quant_api_get_request_headers() + array(
        'content-type' => 'application/json',
        'User-Agent' => 'Quant (+http://quant.io)',
        'Quant-Url' => '/' . ltrim($from, '/'),
      ),
      'method' => 'PATCH',
    );
  }

  if (!variable_get('quant_api_ssl_verify', TRUE)) {
    $request['context'] = stream_context_create(array(
      'ssl' => array(
        'verify_peer' => FALSE,
        'verify_peer_name' => FALSE,
      )
    ));
  }

  quant_log('Sending redirect: !from => !to',
    array(
      '!from' => $from,
      '!to' => $to,
    )
  );
  $response = drupal_http_request($api, $request);

  if (!empty($response->error)) {
    quant_log('Unable to seed redirect: %data (%error)', array(
      '%error' => $response->error,
      '%data' => json_encode($data),
    ), WATCHDOG_ERROR);
  }

  return $response;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function quant_redirect_form_quant_seed_settings_alter(&$form, $form_state) {
  $form['quant_seed_redirects'] = array(
    '#type' => 'checkbox',
    '#title' => t('Export redirects'),
    '#default_value' => variable_get('quant_seed_redirects', FALSE),
  );
}

/**
 * Implements hook_quant_seed_queue().
 */
function quant_redirect_quant_seed_queue() {
  if (!variable_get('quant_seed_redirects', FALSE)) {
    return;
  }

  $queue = quant_get_queue();

  $redirects = db_select('redirect', 'r')
    ->fields('r', array('source', 'redirect', 'status_code'))
    ->condition('status', 1)
    ->execute();

  while ($redirect = $redirects->fetchAssoc()) {
    $status_code = empty($redirect['status_code']) ? variable_get('redirect_default_status_code', 301) : $redirect['status_code'];

    // Strange behavior; to/from are swapped.
    if (strpos($redirect['redirect'], 'node') === 0 && $redirect['status_code'] == 0) {
      $redirect = array(
        'redirect' => $redirect['source'],
        'source' => $redirect['redirect'],
        'status_code' => 301,
      );
    }

    $item = array(
      'quant_redirect_request',
      array($redirect['source'], $redirect['redirect'], $status_code),
    );

    $queue->createItem($item);
  }
}

/**
 * Implements hook_quant_seed().
 *
 * Generates canonical redirects for entities (file, taxonomy, node).
 */
function quant_redirect_quant_seed($location, $data, $meta = [], $context = []) {

  if (empty($context) || !isset($context['type'])) {
    return;
  }

  // @todo: generate canonical redirects (e.g. node/123 or taxonomy/term/123)

}
